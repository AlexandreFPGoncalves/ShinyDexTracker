generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String   @id @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    shiny         Shiny[]
}

type PokemonData {
    dex        Int?
    species    String //? Pokemon Species Name [Ex. Pikachu]
    alias      String?
    encounters Int?
    method     String?
    pokeball   String?
    origin     String? //? Game where the shiny was caught
    gender     String?
    meetAt     DateTime
    charmed    Boolean
    notes      String?
}

//TODO: AG Comment Models and Types
model Shiny {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now())
    userId    String?     @db.ObjectId
    trainer   User?       @relation(fields: [userId], references: [id])
    Shiny     PokemonData
}
